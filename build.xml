<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Copyright (c) Members of the EGEE Collaboration. 2004.
    See http://public.eu-egee.org/partners/ for details on 
    the copyright holders.
    For license conditions see the license file or
    http://eu-egee.org/license.html

    Authors: 
         Akos Frohner <Akos.Frohner@cern.ch>
	Version info: $Id: build.xml,v 1.13 2007/01/09 10:41:08 szamsu Exp $
-->

<project name="cgsi-gsoap" default="dist">

	<!-- ==============================================
	      Builds the GLite security cgsi-gsoap component
	     ============================================== -->
	
	<!-- =========================================
	      Import properties (order is important)
	     ========================================= -->
	
	<!-- Import baseline properties & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- import component build properties,
		        component properties &
		        component common properties -->
	<import file="./project/properties.xml"/>
	
	<!-- import subsystem build properties,
		        subsystem properties &
		        subsystem common properties -->
	<import file="${subsystem.properties.file}"/>

	<!-- import global build properties &
		        global properties -->
	<import file="${global.properties.file}" />
		
	<!-- =========================================
 	      Load dependency property files (order is important)
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${component.dependencies.file}" />
	<property file="${subsystem.dependencies.file}" />
	<property file="${global.dependencies.file}"/>

	<!-- =========================================
             Load configuration definitions (order is important)
         ========================================= -->
    <import file="${global.configure.options.file}"/>
    <import file="${component.configure.options.file}"/>
	
	<!-- =========================================
      	      Import task definitions (order is important)
	     ========================================= -->
	<import file="${subsystem.taskdefs.file}" />
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
		 Load common targets
	     ========================================= -->
	<!-- Put your language target (java/c++-ant/c++-autotool/perl) here -->
	<import file="${global.targets-simple_make.file}" />
		
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
	<property file="${module.build.file}"/>
	
	<!-- ==============================================
		 Local private targets
	     ============================================== -->
	
	<target name="localinit"
		description="Module specific initialization tasks">
        <mkdir dir="${module.build.dir}/src"/>
        <echo file="${module.build.dir}/src/Makefile">
SRCDIR=${module.src.dir}
GSOAP_LOCATION=${with.gsoap.prefix}
GLOBUS_LOCATION=${with.globus.prefix}
OS=${ext.gsoap.platform}
GLOBUS_FLAVOUR=${with.globus.dbg.nothr.flavor}
GLOBUS_FLAVOUR_PTHR=${with.globus.dbg.thr.flavor}
USE_VOMS=yes
VOMS_LOCATION=${stage.abs.dir}
VERSION=${module.version}
GSOAP_VERSION=_gsoap_${ext.gsoap.version.simple}
include $(SRCDIR)/Makefile
        </echo>
        <mkdir dir="${module.build.dir}/test"/>
        <echo file="${module.build.dir}/test/Makefile">
SRCDIR=${module.test.dir}
GSOAP_LOCATION=${with.gsoap.prefix}
GLOBUS_LOCATION=${with.globus.prefix}
OS=${ext.gsoap.platform}
GLOBUS_FLAVOUR=${with.globus.dbg.nothr.flavor}
GLOBUS_FLAVOUR_PTHR=${with.globus.dbg.thr.flavor}
USE_VOMS=yes
VOMS_LOCATION=${stage.abs.dir}
VERSION=${module.version}
GSOAP_VERSION=_gsoap_${ext.gsoap.version.simple}
include $(SRCDIR)/Makefile
        </echo>
	</target>

    <target name="localcompile"/>
    <target name="localclean"/>
	
    <target name="compile" depends="checkstyle,localcompile"
		description="Compiles the source code">
	    <make target="all" dir="${module.build.dir}/src" failonerror="${failonerror}"/>
	</target>

    <target name="compiletest" depends="compile"
		description="Compiles the test code">
	    <make target="all" dir="${module.build.dir}/test" failonerror="${failonerror}"/>
	</target>

    <target name="unittest" depends="compiletest"
		description="Compiles the test code">
	    <make target="test" dir="${module.build.dir}/test" failonerror="${failonerror}"/>
	</target>

    <target name="doc"  depends="compile, compiletest">
        <make target="doc" dir="${module.build.dir}/src" failonerror="${failonerror}" args="PREFIX=${stage.abs.dir}"/>
    </target>

	
    <target name="stage" depends="doc">
        <make target="install" dir="${module.build.dir}/src" failonerror="${failonerror}" args="PREFIX=${stage.abs.dir}"/>
    </target>

    <target name="distbin" depends="doc">
        <!-- do a local install -->
        <mkdir dir="${module.dir}/tempbuild"/>
        <make target="install" dir="${module.build.dir}/src" failonerror="${failonerror}" args="PREFIX=${module.dir}/tempbuild"/>
        
        <!-- pack everything together -->
		<if>
			<isset property="isWindows"/>
			<then>
				<zip destfile="${module.dir}/${dist.dir}/${module.package.name}-${module.version}_bin.zip"
					basedir="tempbuild"
					includes="**/*"/>
			</then>
			<else>
				<exec executable="tar" dir="tempbuild">
					<arg line="-czf ${module.dir}/${dist.dir}/${module.package.name}-${module.version}_bin.tar.gz ." />
				</exec>
			</else>
		</if>
	
		<!-- clean up: remove temporary directories -->
		<delete dir="tempbuild" />
    </target>

    <target name="distsrc" depends="localinit">
        <!-- Make tarball including all directories -->
		<if>
			<isset property="isWindows"/>
			<then>
				<zip destfile="${dist.dir}/${module.package.name}-${module.version}_src.zip"
					basedir="${module.dir}"
					includes="LICENSE RELEASE-NOTES src/**/*"
                    excludes="CVS autogen"/>
			</then>
			<else>
				<exec executable="tar">
					<arg line="-czf ${dist.dir}/${module.package.name}-${module.version}_src.tar.gz --exclude=CVS --exclude=autogen LICENSE RELEASE-NOTES src" />
				</exec>
			</else>
		</if>
    </target>

    <!--
      The package name depends on the gSOAP version, so we need
      some pre-processing on the spec file.
      -->
    <target name="local.package.spec">
        <copy file="${module.project.dir}/glite-security-cgsi-gsoap.spec.template" 
              toFile="${module.project.dir}/${module.package.name}.spec">
			<filterset>
				<filter token="GSOAP.VERSION" value="${ext.gsoap.version.simple}" />
				<filter token="GLOBUS.DBG.NOTHR.FLAVOUR" value="${with.globus.dbg.nothr.flavor}" />
				<filter token="GLOBUS.DBG.THR.FLAVOUR" value="${with.globus.dbg.thr.flavor}" />
			</filterset>
		</copy>
        <concat append="yes" destfile="${module.project.dir}/${module.package.name}.spec">
            <filelist dir="${module.dir}" files="RELEASE-NOTES"/>
        </concat>
    </target>
    
    <target name="dist" depends="stage, distsrc, distbin, local.package.spec, package.spec, packager"/>

    <!-- https://savannah.cern.ch/bugs/?func=detailitem&item_id=14961 -->
	<!-- Creates directories and prepares necessary environment for rpm building -->
	<target name="rpm.init" depends="init.rpm.properties">
		<!-- Create necessary directories -->
                <delete dir="${rpm.build.path}"/>
                <delete dir="${module.dir}/RPMS"/>
		<mkdir dir="${rpm.build.path}" />
		<mkdir dir="${rpm.build.path}/SOURCES" />
		<mkdir dir="${rpm.build.path}/BUILD" />
		<mkdir dir="${rpm.build.path}/RPMS" />
		<mkdir dir="${rpm.build.path}/SRPMS" />
		<mkdir dir="${rpm.build.path}/SPECS" />

        <property name="package.prefix" value="/usr"/>
		<mkdir dir="${rpm.tmp.path}/${package.prefix}" />

		<exec executable="pwd" dir="." outputproperty="current.abs.dir" failonerror="true" />
		<!-- repackage the tarball files to have correct path -->
		<exec executable="tar" dir="${rpm.tmp.path}/${package.prefix}" failonerror="true">
			<arg line="xzf ${current.abs.dir}/${dist.dir}/${component.dist.file}" />
		</exec>
		<exec executable="tar" dir="${rpm.tmp.path}" failonerror="true">
			<arg line="czf ${rpm.build.path}/SOURCES/${package.name.correct}-${module.version}_bin.tar.gz --exclude=*.la ." />
		</exec>
		<!--delete dir="${rpm.tmp.path}" /-->
	</target>


</project>		
